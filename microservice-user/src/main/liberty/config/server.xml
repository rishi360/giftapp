<!-- Copyright (c) 2017 IBM Corporation and others.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the Eclipse Public License v1.0
  which accompanies this distribution, and is available at
  http://www.eclipse.org/legal/epl-v10.html
 
  Contributors:
  IBM Corporation - initial API and implementation
-->
<server description="User server">
    <featureManager>
        <feature>microProfile-1.0</feature>
        <feature>mpJwt-1.0</feature>
        <feature>mpConfig-1.1</feature>
        <feature>ssl-1.0</feature>
    </featureManager>

    <!-- This is the keystore that will be used by SSL and by JWT. 
    	 The keystore is built using the maven keytool plugin -->
    <keyStore id="defaultKeyStore" location="keystore.jceks"
              type="JCEKS" password="secret" />

    <!-- The HTTP ports that the application will use. -->
    <httpEndpoint id="defaultHttpEndpoint" host="*"
                  httpPort="${http.port}" httpsPort="${https.port}"/>

	<!-- The mongo database driver. -->
    <library id="mongoLib">
        <file name="${shared.resource.dir}/mongo-java-driver.jar" />
    </library>

	<!-- The application containing the user and login endpoints.
	     This needs access to the mongo database driver. -->
    <webApplication location="${app.name}" contextRoot="/">
        <classloader commonLibraryRef="mongoLib" />
    </webApplication>
    
    <!-- This configuration allows cross-origin HTTP requests, such
         as those from the front-end component (different port). -->
     <cors domain="/users"
           allowedOrigins="*"
           allowedMethods="GET, DELETE, POST, PUT"
           allowedHeaders="Accept, Content-Type, Authorization"
           maxAge="3600" />

     <cors domain="/logins"
           allowedOrigins="*"
           allowedMethods="GET, POST"
           allowedHeaders="Accept, Content-Type, Authorization"
           maxAge="3600" />

    <!-- This JWT builder is used to build a JWT for an authenticated user.
         JWTs generated by this builder are in the 'users' group, and contain
         the user name of the authenticated user. -->
    <jwtBuilder id="jwtUserBuilder" issuer="${jwt.issuer}" expiry="24h"
                keyAlias="default" audiences="acmeGifts" jti="true"/>

	<!-- The MP JWT configuration that injects the caller's JWT into a
	     ResourceScoped bean for inspection. -->
    <mpJwt id="jwtUserConsumer" keyName="default"
           audiences="acmeGifts" issuer="${jwt.issuer}"/>
</server>
